// Generated by CoffeeScript 1.7.1
(function() {
  var Result, TrieIndex, empty, normalization_pattern, spaces;

  Result = require('../result');

  normalization_pattern = new RegExp('[^a-zA-Z ]', 'g');

  spaces = new RegExp(' ', 'g');

  empty = [];

  TrieIndex = (function() {
    function TrieIndex() {
      this.root = {};
    }

    TrieIndex.prototype.add = function(id, text) {
      var i, w, word, words, _i, _j, _len, _ref, _ref1;
      words = TrieIndex.normalize(text).split(' ');
      for (i = _i = 0, _ref = words.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        word = "";
        _ref1 = words.slice(i);
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          w = _ref1[_j];
          word += w;
        }
        this.index(id, word);
      }
      return null;
    };

    TrieIndex.prototype.search = function(value) {
      var c, node, _i, _len, _ref;
      node = this.root;
      _ref = TrieIndex.normalize(value).replace(spaces, '');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        if (!node[c]) {
          return empty;
        }
        node = node[c];
      }
      return node['$'] || new Result();
    };

    TrieIndex.prototype.index = function(id, word) {
      var c, node, _i, _len;
      node = this.root;
      for (_i = 0, _len = word.length; _i < _len; _i++) {
        c = word[_i];
        if (!node[c]) {
          node[c] = {
            '$': new Result()
          };
        }
        node[c]['$'].add(id);
        node = node[c];
      }
    };

    TrieIndex.normalize = function(text) {
      return text.replace(normalization_pattern, '').toLowerCase();
    };

    return TrieIndex;

  })();

  module.exports = TrieIndex;

}).call(this);
