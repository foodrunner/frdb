// Generated by CoffeeScript 1.7.1
(function() {
  var Result, SetIndex, TextIndex, blacklist, empty, natural, normalization_pattern, spaces;

  natural = require('natural');

  Result = require('../result');

  SetIndex = require('./set_index');

  normalization_pattern = new RegExp('[^a-zA-Z ]', 'g');

  spaces = new RegExp(' +', 'g');

  empty = [];

  blacklist = {
    "the": true,
    "be": true,
    "to": true,
    "of": true,
    "and": true,
    "in": true,
    "that": true,
    "have": true,
    "it": true,
    "not": true,
    "on": true,
    "with": true,
    "he": true,
    "as": true,
    "you": true,
    "do": true,
    "at": true,
    "this": true,
    "but": true,
    "his": true,
    "by": true,
    "from": true,
    "for": true,
    "are": true,
    "serve": true,
    "dish": true,
    "dishes": true,
    "restaurant": true,
    "restaurants": true,
    "its": true,
    "your": true,
    "all": true,
    "an": true,
    "is": true,
    "food": true,
    "serv": true,
    "cuisine": true
  };

  TextIndex = (function() {
    function TextIndex() {
      this.set = new SetIndex();
    }

    TextIndex.prototype.add = function(id, text) {
      var tokens, word, _i, _len;
      tokens = TextIndex.normalize(text).split(' ');
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        word = tokens[_i];
        this.index(id, word);
      }
      return null;
    };

    TextIndex.prototype.search = function(text) {
      var token, tokens;
      tokens = TextIndex.normalize(text).split(' ');
      return Result.intersect((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tokens.length; _i < _len; _i++) {
          token = tokens[_i];
          _results.push(this.set.search(TextIndex.variants(token)));
        }
        return _results;
      }).call(this));
    };

    TextIndex.prototype.index = function(id, word) {
      if (blacklist[word] != null) {
        return;
      }
      return this.set.add(id, TextIndex.variants(word));
    };

    TextIndex.normalize = function(text) {
      return text.replace(normalization_pattern, '').replace(spaces, ' ').trim().toLowerCase();
    };

    TextIndex.variants = function(word) {
      var arr, stemmed;
      arr = [word];
      stemmed = natural.PorterStemmer.stem(word);
      if (stemmed !== word) {
        arr.push(stemmed);
      }
      return arr;
    };

    return TextIndex;

  })();

  module.exports = TextIndex;

}).call(this);
