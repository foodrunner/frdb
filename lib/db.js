// Generated by CoffeeScript 1.7.1
(function() {
  var DB, Helper, IDSet, PolygonIndex, Result, SetIndex, TextIndex, TrieIndex, empty;

  IDSet = require('./id_set');

  Result = require('./result');

  Helper = require('./helper');

  SetIndex = require('./indexes/set_index');

  TrieIndex = require('./indexes/trie_index');

  TextIndex = require('./indexes/text_index');

  PolygonIndex = require('./indexes/polygon_index');

  empty = [];

  DB = (function() {
    function DB() {
      this.idLookup = {};
      this.indexes = {};
    }

    DB.prototype.createIndex = function(name, type) {
      if (this.indexes[name] != null) {
        return;
      }
      switch (type) {
        case "set":
          return this.indexes[name] = new SetIndex();
        case "trie":
          return this.indexes[name] = new TrieIndex();
        case "text":
          return this.indexes[name] = new TextIndex();
        case "polygon":
          return this.indexes[name] = new PolygonIndex();
      }
    };

    DB.prototype.add = function(item, index) {
      var name, value;
      this.idLookup[item.id] = item;
      for (name in index) {
        value = index[name];
        this.indexes[name].add(item.id, value);
      }
      return null;
    };

    DB.prototype.search = function(options) {
      var idsets, option, r, value;
      idsets = [];
      for (option in options) {
        value = options[option];
        if (this.indexes[option] == null) {
          return new Result(empty, this);
        }
        r = this.indexes[option].search(value);
        if (r.count === 0) {
          return new Result(empty, this);
        }
        idsets.push(r);
      }
      return new Result(Object.keys(IDSet.intersect(idsets).ids), this);
    };

    DB.prototype.list = function() {
      return new Result(Object.keys(this.idLookup), this);
    };

    DB.prototype.get = function(id) {
      return Helper.clone(this.idLookup[id]);
    };

    return DB;

  })();

  module.exports = DB;

  module.exports.Helper = Helper;

}).call(this);
