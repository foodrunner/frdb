// Generated by CoffeeScript 1.7.1
(function() {
  var DB, PolygonIndex, Result, SetIndex, TextIndex, TrieIndex, empty;

  Result = require('./result');

  SetIndex = require('./indexes/set_index');

  TrieIndex = require('./indexes/trie_index');

  TextIndex = require('./indexes/text_index');

  PolygonIndex = require('./indexes/polygon_index');

  empty = [];

  DB = (function() {
    function DB() {
      this.idLookup = {};
      this.indexes = {};
    }

    DB.prototype.createIndex = function(name, type) {
      if (this.indexes[name] != null) {
        return;
      }
      switch (type) {
        case "set":
          return this.indexes[name] = new SetIndex();
        case "trie":
          return this.indexes[name] = new TrieIndex();
        case "text":
          return this.indexes[name] = new TextIndex();
        case "polygon":
          return this.indexes[name] = new PolygonIndex();
      }
    };

    DB.prototype.add = function(item, index) {
      var name, value;
      this.idLookup[item.id] = item;
      for (name in index) {
        value = index[name];
        this.indexes[name].add(item.id, value);
      }
      return null;
    };

    DB.prototype.search = function(options, sortFn) {
      var id, option, r, results, value, _;
      if (sortFn == null) {
        sortFn = null;
      }
      results = [];
      for (option in options) {
        value = options[option];
        if (this.indexes[option] == null) {
          return empty;
        }
        r = this.indexes[option].search(value);
        if (r.count === 0) {
          return empty;
        }
        results.push(r);
      }
      return ((function() {
        var _ref, _results;
        _ref = Result.intersect(results).ids;
        _results = [];
        for (id in _ref) {
          _ = _ref[id];
          _results.push(this.idLookup[id]);
        }
        return _results;
      }).call(this)).sort(sortFn);
    };

    return DB;

  })();

  module.exports = DB;

}).call(this);
